import matplotlib.pyplot as plt
import numpy as np
import time

mbed = [

    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -
    1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

]

y = [

    1015, 990, 990, 982, 982, 980, 980, 980, 980, 990, 990, 996, 993, 993, 995, 995, 1016, 1016, 1012, 1012, 1026, 1026, 1032, 1032, 1036, 1036, 1034, 1034, 1037, 1037, 1042, 1042,
    1044, 1044, 1041, 1036, 1036, 1038, 1038, 1035, 1035, 1040, 1040, 1035, 1035, 1028, 1028, 1024, 1024, 1024, 1024, 1023, 1023, 1024, 1024, 1027, 1028, 1028, 1031, 1031, 1031, 1031, 1030, 1030,
    1020, 1020, 1004, 1004, 985, 985, 969, 969, 966, 966, 972, 972, 971, 973, 973, 981, 981, 990, 990, 1032, 1032, 1123, 1123, 1296, 1296, 1543, 1543, 1890, 1890, 1998, 1998, 1998,
    1998, 1998, 1636, 1636, 1008, 1008, 395, 395, -35, -35, -353, -353, -518, -518, -625, -625, -
    591, -591, -509, -509, -289, -
    289, 56, 390, 390, 701, 701, 1018, 1018, 1352, 1352, 1585,
    1585, 1672, 1672, 1627, 1627, 1627, 1627, 1607, 1607, 1528, 1528, 1437, 1437, 1320, 1248, 1248, 1201, 1201, 1154, 1154, 1107, 1107, 1068, 1068, 1024, 1024, 982, 982, 958, 958, 938, 938,
    934, 934, 943, 965, 965, 979, 979, 989, 989, 1006, 1006, 1036, 1036, 1049, 1049, 1053, 1053, 1059, 1059, 1056, 1056, 1059, 1059, 1059, 1056, 1056, 1047, 1047, 1038, 1038, 1037, 1037,
    1032, 1032, 1023, 1023, 1016, 1016, 1011, 1011, 1014, 1014, 1012, 1012, 1014, 1015, 1015, 1015, 1015, 1025, 1025, 1035, 1035, 1034, 1034, 1025, 1025, 1022, 1022, 1030, 1030, 1028, 1028, 1027,
    1027, 1030, 1030, 1026, 1016, 1016, 1017, 1017, 1022, 1022, 1025, 1025, 1026, 1026, 1029, 1029, 1031, 1031, 1033, 1033, 1028, 1028, 1023, 1023, 1026, 1025, 1025, 1023, 1023, 1024, 1024, 1030,
    1030, 1031, 1031, 1024, 1024, 1018, 1018, 1021, 1021, 1017, 1017, 1026, 1026, 1029, 1029, 1029, 1025, 1025, 1029, 1029, 1036, 1036, 1037, 1037, 1031, 1031, 1022, 1022, 1020, 1020, 1014, 1014,
    1013, 1013, 1023, 1029, 1029, 1021, 1021, 1017, 1017, 1021, 1021, 1031, 1031, 1037, 1037, 1035, 1035, 1037, 1037, 1035, 1035, 1029, 1029, 1023, 1022, 1022, 1022, 1022, 1017, 1017, 1017, 1017,
    1023, 1023, 1025, 1025, 1024, 1024, 1025, 1025, 1026, 1026, 1030, 1030, 1028, 1028, 1023, 1022, 1022, 1023, 1023, 1020, 1020, 1025, 1025, 1036, 1036, 1039, 1039, 1034, 1034, 1029, 1029, 1026,
    1026, 1018, 1018, 1005, 1009, 1009, 1016, 1016, 1019, 1019, 1021, 1021, 1024, 1024, 1033, 1033, 1032, 1032, 1036, 1036, 1035, 1035, 1035, 1035, 1031, 1021, 1021, 1020, 1020, 1022, 1022, 1017,
    1017, 1017, 1017, 1018, 1018, 1023, 1023, 1011, 1011, 996, 996, 1001, 1001, 1014, 1031, 1031, 1039, 1039, 1037, 1037, 1027, 1027, 1021, 1021, 1014, 1014, 1011, 1011, 1017, 1017, 1021, 1021,
    1030, 1030, 1021, 1021, 1026, 1029, 1029, 1035, 1035, 1040, 1040, 1035, 1035, 1034, 1034, 1029, 1029, 1026, 1026, 1029, 1029, 1033, 1033, 1032, 1032, 1032, 1026, 1026, 1016, 1016, 1011, 1011,
    1006, 1006, 1004, 1004, 1003, 1003, 1004, 1004, 1012, 1012, 1019, 1019, 1026, 1026, 1034, 1044, 1044, 1045, 1045, 1045, 1045, 1041, 1041, 1040, 1040, 1045, 1045, 1053, 1053, 1058, 1058, 1060,
    1060, 1056, 1056, 1050, 1039, 1039, 1026, 1026, 1018, 1018, 1009, 1009, 1001, 1001, 994, 994, 995, 995, 1008, 1008, 1020, 1020, 1033, 1033, 1051, 1062, 1062, 1060, 1060, 1043, 1043, 1031,
    1031, 1030, 1030, 1033, 1033, 1028, 1028, 1019, 1019, 1021, 1021, 1020, 1020, 1010, 1010, 1008, 1015, 1015, 1003, 1003, 974, 974, 933, 933, 863, 863, 666, 666, 269, 269, -188, -188,
    -654, -654, -540, -540, -150, 1047, 1047, 1964, 1964, 1998, 1998, 1998, 1998, 1998, 1998, 1973, 1973, 1628, 1628, 1322, 1322, 1206, 1206, 1149, 1149, 1013, 917, 917, 731, 731, 718, 718,
    566, 566, 512, 512, 491, 491, 489, 489, 547, 547, 626, 626, 740, 740, 833, 909, 909, 953, 953, 982, 982, 1006, 1006, 1037, 1037, 1080, 1080, 1091, 1091, 1084, 1084, 1069,
    1069, 1049, 1049, 1046, 1046, 1046, 1037, 1037, 1028, 1028, 1017, 1017, 1030, 1030, 1042, 1042, 1031, 1031, 1023, 1023, 1021, 1021, 1021, 1021, 1017, 1017, 1014, 1015, 1015, 1015, 1015, 1020,
    1020, 1024, 1024, 1020, 1020, 1015, 1015, 1011, 1011, 1017, 1017, 1013, 1013, 1010, 1010, 1014, 1015, 1015, 1018, 1018, 1017, 1017, 1023, 1023, 1021, 1021, 1024, 1024, 1023, 1023, 1020, 1020,
    1024, 1024, 1022, 1022, 1016, 1023, 1023, 1013, 1013, 1016, 1016, 1009, 1009, 1009, 1009, 1017, 1017, 1022, 1022, 1025, 1025, 1021, 1021, 1016, 1016, 1010, 1007, 1007, 1011, 1011, 1019, 1019,
    1028, 1028, 1033, 1033, 1027, 1027, 1017, 1017, 1009, 1009, 1007, 1007, 1009, 1009, 1016, 1016, 1023, 1022, 1022, 1016, 1016, 1015, 1015, 1018, 1018, 1024, 1024, 1023, 1023, 1026, 1026, 1028,
    1028, 1019, 1019, 1014, 1014, 1017, 1023, 1023, 1018, 1018, 1014, 1014, 1018, 1018, 1018, 1018, 1020, 1020, 1022, 1022, 1020, 1020, 1018, 1018, 1013, 1013, 1013, 1016, 1016, 1020, 1020, 1022,
    1022, 1025, 1025, 1022, 1022, 1020, 1020, 1019, 1019, 1017, 1017, 1014, 1014, 1019, 1019, 1015, 1017, 1017, 1018, 1018, 1017, 1017, 1015, 1015, 1017, 1017, 1019, 1019, 1020, 1020, 1016, 1016,
    1017, 1017, 1018, 1018, 1022, 1025, 1025, 1021, 1021, 1018, 1018, 1019, 1019, 1018, 1018, 1021, 1021, 1025, 1025, 1027, 1027, 1022, 1022, 1014, 1014, 1013, 1013, 1008, 1012, 1012, 1012, 1012,
    1012, 1012, 1016, 1016, 1018, 1018, 1022, 1022, 1028, 1028, 1033, 1033, 1033, 1033, 1026, 1026, 1019, 1007, 1007, 1008, 1008, 1007, 1007, 1011, 1011, 1014, 1014, 1015, 1015, 1019, 1019, 1016,
    1016, 1016, 1016, 1023, 1023, 1031, 1029, 1029, 1023, 1023, 1022, 1022, 1019, 1019, 1024, 1024, 1019, 1019, 1018, 1018, 1019, 1019, 1019, 1019, 1017, 1017, 1012, 1013, 1013, 1014, 1014, 1016,
    1016, 1017, 1017, 1022, 1022, 1021, 1021, 1019, 1019, 1017, 1017, 1023, 1023, 1028, 1028, 1029, 1029, 1031, 1030, 1030, 1025, 1025, 1018, 1018, 1013, 1013, 1013, 1013, 1010, 1010, 1012, 1012,
    1013, 1013, 1018, 1018, 1021, 1021, 1016, 1015, 1015, 1016, 1016, 1017, 1017, 1027, 1027, 1028, 1028, 1028, 1028, 1020, 1020, 1019, 1019, 1022, 1022, 1019, 1019, 1023, 1028, 1028, 1027, 1027,
    1023, 1023, 1017, 1017, 1014, 1014, 1017, 1017, 1016, 1016, 1014, 1014, 1014, 1014, 1016, 1016, 1020, 1024, 1024, 1025, 1025, 1022, 1022, 1020, 1020, 1021, 1021, 1023, 1023, 1026, 1026, 1029,

]
avg = sum(y)/len(y)
scale = 0.004
print(avg)


def clip(y):
    new_y = []
    for i in y:
        if i > 500 and i < 1300:
            new_y.append(0)
        elif i >= 1300:
            new_y.append(1)
        else:
            new_y.append(-1)

    return new_y


def integrate(y):
    new_y = []
    start = 0
    for i in y:
        start += i
        new_y.append(start)
    return new_y


def prideict(y):
    pred = []


class FSM:
    def __init__(self):
        self.state = "WAIT"
        self.fsm = {
            "WAIT": {0: "WAIT", 1: "S1", -1: "S4"},
            "S1": {0: "S1", 1: "S1", -1: "S2"},
            "S2": {0: "S2", 1: "S3", -1: "S2"},
            "S3": {0: "WAIT", 1: "S3", -1: "ERROR"},
            "S4": {0: "S4", 1: "S5", -1: "S4"},
            "S5": {0: "S5", 1: "S5", -1: "S6"},
            "S6": {0: "WAIT", 1: "ERROR", -1: "S6"}
        }
        self.actions = []

    def _change_state(self, input):
        self.state = self.fsm[self.state][input]

        if (self.state == "ERROR"):
            self.state = "WAIT"
            return "ERROR"

        return self.state

    def _read_actions(self):
        if (self.state != "WAIT"):
            self.state = "WAIT"
        return self.actions
        # dequeue

    def get_actions(self, window):
        for data in window:
            if self.state == "S3":
                if (self._change_state(data) == "WAIT"):
                    # return "up"
                    self.actions.append("up")

            elif self.state == "S6":
                if (self._change_state(data) == "WAIT"):
                    # return "down"
                    self.actions.append("down")

            else:
                self._change_state(data)

        return self._read_actions()


#input[i] == 1
ex = FSM()
sec1 = time.time()
actions = ex.get_actions(clip(y))
sec2 = time.time()


print(f'actions: {actions}')
print(f'time: {sec2-sec1} s')
# y = clip(y)

x = list(range(len(y)))

plt.plot(x, mbed)
plt.show()
